Traditional hello world script
           #!/bin/bash          
          echo Hello World    
*****************************************************
A very simple backup script
         #!/bin/bash          
        tar -cZf /var/my-backup.tgz /home/me/
******************************************************
Sample: stdout 2 file
This will cause the ouput of a program to be written to a file.

         ls -l > ls-l.txt
*****************************************************************
Sample: stderr 2 file
This will cause the stderr ouput of a program to be written to a file.

         grep da * 2> grep-errors.txt
*********************************************************************
Sample: stdout 2 stderr
This will cause the stderr ouput of a program to be written to the same filedescriptor than stdout.

         grep da * 1>&2 
*******************************************************************
Sample: stderr 2 stdout
This will cause the stderr ouput of a program to be written to the same filedescriptor than stdout.

         grep * 2>&1
******************************************************************
Sample: stderr and stdout 2 file
This will place every output of a program to a file. This is suitable sometimes for cron entries, if you want a command to pass in absolute silence.

         rm -f $(find / -name core) &> /dev/null 
********************************************************************
PIPES
********************************************************************
Sample: simple pipe with sed
This is very simple way to use pipes.

         ls -l | sed -e "s/[aeio]/u/g"   
        
Here, the following happens: first the command ls -l is executed, and it's output, instead of being printed, is sent (piped) to the sed program, which in turn, prints what it has to.
***************************************************************
Sample: an alternative to ls -l *.txt
Probably, this is a more difficult way to do ls -l *.txt, but it is here for illustrating pipes, not for solving such listing dilema.

         ls -l | grep "\.txt$"
        
Here, the output of the program ls -l is sent to the grep program, which, in turn, will print lines which match the regex "\.txt$".
*****************************************************************
Variables
*****************************************************************
Sample: Hello World! using variables
             #!/bin/bash          
            STR="Hello World!"
            echo $STR    
*******************************************************************
Local variables can be created by using the keyword local.

                 #!/bin/bash
                HELLO=Hello 
                function hello {
                        local HELLO=World
                        echo $HELLO
                }
                echo $HELLO
                hello
                echo $HELLO
********************************************************************
Sample: Basic conditional example if .. then
             #!/bin/bash
            if [ "foo" = "foo" ]; then
               echo expression evaluated as true
            fi

Sample: Basic conditional example if .. then ... else
             #!/bin/bash
            if [ "foo" = "foo" ]; then
               echo expression evaluated as true
            else
               echo expression evaluated as false
            fi

 Sample: Conditionals with variables
             #!/bin/bash
            T1="foo"
            T2="bar"
            if [ "$T1" = "$T2" ]; then
                echo expression evaluated as true
            else
                echo expression evaluated as false
            fi
*****************************************************************
 Loops for, while and until
******************************************************************
For sample
         #!/bin/bash
        for i in $( ls ); do
            echo item: $i
        done
        
On the second line, we declare i to be the variable that will take the different values contained in $( ls ).

The third line could be longer if needed, or there could be more lines before the done (4).

'done' (4) indicates that the code that used the value of $i has finished and $i can take a new value.

This script has very little sense, but a more useful way to use the for loop would be to use it to match only certain files on the previous example

7.2 C-like for
fiesh suggested adding this form of looping. It's a for loop more similar to C/perl... for.

         #!/bin/bash
        for i in `seq 1 10`;
        do
                echo $i
        done    
        
7.3 While sample
          #!/bin/bash 
         COUNTER=0
         while [  $COUNTER -lt 10 ]; do
             echo The counter is $COUNTER
             let COUNTER=COUNTER+1 
         done
         
This script 'emulates' the well known (C, Pascal, perl, etc) 'for' structure

7.4 Until sample
          #!/bin/bash 
         COUNTER=20
         until [  $COUNTER -lt 10 ]; do
             echo COUNTER $COUNTER
             let COUNTER-=1
         done
******************************************************************
Functions
******************************************************************
function my_func { my_code }
******************************************************************
Functions sample
            #!/bin/bash 
           function quit {
               exit
           }
           function hello {
               echo Hello!
           }
           hello
           quit
           echo foo 
**********************************************************
Functions with parameters sample
                 #!/bin/bash 
                function quit {
                   exit
                }  
                function e {
                    echo $1 
                }  
                e Hello
                e World
                quit
                echo foo 
***********************************************************
User interfaces
9.1 Using select to make simple menus
            #!/bin/bash
           OPTIONS="Hello Quit"
           select opt in $OPTIONS; do
               if [ "$opt" = "Quit" ]; then
                echo done
                exit
               elif [ "$opt" = "Hello" ]; then
                echo Hello World
               else
                clear
                echo bad option
               fi
           done
**********************************************************
Reading user input with read
 #!/bin/bash
                echo Please, enter your name
                read NAME
                echo "Hi $NAME!"
        
As a variant, you can get multiple values with read, this example may clarify this.

                 #!/bin/bash
                echo Please, enter your firstname and lastname
                read FN LN 
                echo "Hi! $LN, $FN !"
**************************************************************
In bash, the return value of a program is stored in a special variable called $?
*****************************************************************
String comparison operators
(1) s1 = s2

(2) s1 != s2

(3) s1 < s2

(4) s1 > s2

(5) -n s1

(6) -z s1

(1) s1 matches s2

(2) s1 does not match s2

(3) __TO-DO__

(4) __TO-DO__

(5) s1 is not null (contains one or more characters)

(6) s1 is null
*******************************************************************8
        